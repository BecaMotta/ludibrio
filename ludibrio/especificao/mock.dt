MOCK
====
Mocks são objetos pré-programados com as expectativas que formam uma especificação das chamadas que se espera receber. Quando o objeto sob teste é executado, todas as expectativas definidas para os mocks têm obrigatoriamente que ser cumpridas ou a especificação falhará.

    >>> from ludibrio.mock import Mock

    >>> with Mock() as greetings:
    ...     greetings.excuse_me() >> 'Com licença'
    ...     greetings.hello('Gustavo') >> 'Ola, Gustavo'
    ...     greetings.see_you_soon >> 'Até logo'
    ...     greetings.see_you_soon >> 'Até logo, denovo'
    >>> print greetings.excuse_me()
    Com licença
    >>> print greetings.hello('Gustavo')
    Ola, Gustavo
    >>> print greetings.see_you_soon
    Até logo
    >>> print greetings.see_you_soon
    Até logo, denovo
    >>> print greetings.see_you_soon
    Traceback (most recent call last):
    ...
    AssertionError: Object's mocks are not pre-programmed with expectations


    >>> with Mock() as greetings:
    ...     greetings.excuse_me() >> 'Com licença'
    ...     greetings.see_you_soon >> 'Até logo'
    >>> print greetings.excuse_me()
    Com licença
    >>> print greetings.hello('Gustavo Rezende')
    Traceback (most recent call last):
    ...
    AssertionError: Object's mocks are not pre-programmed with expectations.
    Got:
    hello
    Expected:
    see_you_soon

    >>> with Mock() as greetings:
    ...     greetings.excuse_me(name='gustavo') >> 'Com licença'
    >>> greetings.excuse_me(name='Diego Manhaes')
    Traceback (most recent call last):
    ...
    AssertionError: Object's mocks are not pre-programmed with expectations.
    Got:
    excuse_me(name='Diego Manhaes')
    Expected:
    excuse_me(name='gustavo')

    >>> with Mock() as listing:
    ...     listing[1] >> 'um'
    ...     listing[1:4] >> ['dois', 'tres', 'quatro']
    ...     listing['quatro'] >> 4
    >>> print listing[1]
    um
    >>> print listing[1:4]
    ['dois', 'tres', 'quatro']
    >>> print listing['quatro']
    4

    >>> with Mock() as callable:
    ...     callable(two=2) >> 2
    >>> callable(two=2)
    2

    >>> with Mock() as operator:
    ...     operator * 4 >> 4
    ...     operator + 4 >> 5
    ...     operator ** 4 >> 1
    >>> operator * 4
    4
    >>> operator + 4
    5
    >>> operator ** 4
    1

    >>> with Mock() as Greetings:
    ...     greetings = Greetings(tree=3)
    >>> greetings
    Mock Object

    >>> with Mock() as MySQLdb:
    ...     con = MySQLdb.connect('servidor', ' usuario', 'senha')
    ...     con.select_db('banco de dados') >> None
    ...     cursor = con.cursor()
    ...     cursor.execute('ALGUM SQL') >> None
    ...     cursor.fetchall() >> [1,2,3,4,5]
    >>> con = MySQLdb.connect('servidor', ' usuario', 'senha')
    >>> con.select_db('banco de dados')
    >>> cursor = con.cursor()
    >>> cursor.execute('ALGUM SQL')
    >>> cursor.fetchall()
    [1, 2, 3, 4, 5]

    >>> with Mock() as testeError:
    ...     testeError.foo('bar') >> ArithmeticError('teste error')
    >>> testeError.foo('bar')
    Traceback (most recent call last):
    ...
    ArithmeticError: teste error

    >>> with Mock() as teste:
    ...     teste.called() << 1
    ...     teste.notcalled() << 2
    >>> teste.called()
    1
    >>> teste.validate()
    Traceback (most recent call last):
    ...
    AssertionError: Object's mocks are not pre-programmed with expectations



    >>> with Mock() as count:
    ...     count() >> 1
    ...     count() >> 2
    ...     count() >> 3
    >>> count()
    1
    >>> count()
    2
    >>> count()
    3


    >>> class Conta(object):
    ...     def transferir(self, conta, valor):
    ...             valor = self.sacar(valor)
    ...             conta.depositar(valor)


    >>> def transferir(conta_origem, conta_destino, valor):
    ...    conta_origem.debitar(valor)
    ...    conta_destino.creditar(valor)

    >>> with Mock() as conta_origem:
    ...     conta_origem.debitar(100) >> None
    >>> with Mock() as conta_destino:
    ...     conta_destino.creditar(100) >> None

    >>> transferir(conta_origem, conta_destino, 100)
