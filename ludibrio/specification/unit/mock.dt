Mock
====
Mocks are objects with programmed calls that are themselves the expectation. When the object under test is executed, all expectations defined on the mocks have necessarily to be accomplished or the specification will fail.

    >>> from ludibrio.mock import Mock

    >>> with Mock() as greetings:
    ...     greetings.excuse_me() >> 'Com licença'
    ...     greetings.hello('Gustavo') >> 'Ola, Gustavo'
    ...     greetings.see_you_soon >> 'Até logo'
    ...     greetings.see_you_soon >> 'Até logo, denovo'
    >>> print greetings.excuse_me()
    Com licença
    >>> print greetings.hello('Gustavo')
    Ola, Gustavo
    >>> print greetings.see_you_soon
    Até logo
    >>> print greetings.see_you_soon
    Até logo, denovo
    >>> print greetings.see_you_soon
    Traceback (most recent call last):
    ...
    MockExpectationError: Mock Object received unexpected call:see_you_soon
    Expected:
    greetings.excuse_me() >> 'Com licença'
    greetings.hello('Gustavo') >> 'Ola, Gustavo'
    greetings.see_you_soon >> 'Até logo'
    greetings.see_you_soon >> 'Até logo, denovo'
    Got:
    Stack trace (most recent call last)
      File "<doctest mock.dt[2]>", line 1, in <module>
        print greetings.excuse_me()
      File "<doctest mock.dt[3]>", line 1, in <module>
        print greetings.hello('Gustavo')
      File "<doctest mock.dt[4]>", line 1, in <module>
        print greetings.see_you_soon
      File "<doctest mock.dt[5]>", line 1, in <module>
        print greetings.see_you_soon
      File "<doctest mock.dt[6]>", line 1, in <module>
        print greetings.see_you_soon


    >>> with Mock() as listing:
    ...     listing[1] >> 'one'
    ...     listing[1:4] >> ['two', 'three', 'four']
    ...     listing['four'] >> 4
    >>> print listing[1]
    one
    >>> print listing[1:4]
    ['two', 'three', 'four']
    >>> print listing['four']
    4

    >>> with Mock() as callable:
    ...     callable(two=2) >> 2
    >>> callable(two=2)
    2

    >>> with Mock() as operator:
    ...     operator * 4 >> 4
    ...     operator + 4 >> 5
    ...     operator ** 4 >> 1
    >>> operator * 4
    4
    >>> operator + 4
    5
    >>> operator ** 4
    1

    >>> with Mock() as Greetings:
    ...     greetings = Greetings(tree=3)
    >>> greetings
    Mock Object

    >>> with Mock() as MySQLdb:
    ...     con = MySQLdb.connect('server', 'user', 'password')
    ...     con.select_db('database') >> None
    ...     cursor = con.cursor()
    ...     cursor.execute('SOME SQL') >> None
    ...     cursor.fetchall() >> [1,2,3,4,5]
    >>> con = MySQLdb.connect('server', 'user', 'password')
    >>> con.select_db('database')
    >>> cursor = con.cursor()
    >>> cursor.execute('SOME SQL')
    >>> cursor.fetchall()
    [1, 2, 3, 4, 5]

    >>> with Mock() as testeError:
    ...     testeError.foo('bar') >> ArithmeticError('test error')
    >>> testeError.foo('bar')
    Traceback (most recent call last):
    ...
    ArithmeticError: test error



    >>> with Mock() as count:
    ...     count() >> 1
    ...     count() >> 2
    ...     count() >> 3
    >>> count()
    1
    >>> count()
    2
    >>> count()
    3


    >>> def credit_transfer(from_account, to_account, value):
    ...    from_account.debit(value)
    ...    to_account.credit(value)

    >>> with Mock() as from_account:
    ...     from_account.debit(100) >> None
    >>> with Mock() as to_account:
    ...     to_account.credit(100) >> None

    >>> credit_transfer(from_account, to_account, 100)

